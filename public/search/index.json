[{"content":"Go微服务网关开发（2）：路由转发功能的实现 本章实现了API网关的路由转发功能\n什么是路由转发功能 路由转发功能是指API网关将客户端请求转发到后端服务的功能。 直观理解就是访问API网关端口（8080），会将请求转发到后端服务端口（8081、8082）等。 路由转发功能示例图 实现第一步：搭好文件结构 首先，我们需要知道网关分为以下模块 配置文件\n解析配置文件模块\n网关核心模块\n- 反向代理模块\n- 路由模块\n服务器模块 其次，我们需要了解Go的常见架构 ├── cmd ├── internal └── pkg cmd：负责网关的入口 internal：负责网关的内部模块，不暴露给外部使用 pkg：负责暴露给外部使用的模块 最后，我们结合上面的模块与Go的常见架构，搭好文件结构 ├── cmd │ └── main.go //网关的入口 ├── configs │ └── config.yaml //网关的配置文件 ├── internal │ ├── config │ │ └── config.go //解析配置文件模块 │ └── core //核心模块 │ ├── gateway.go //网关核心模块 │ ├── proxy.go //反向代理模块 │ ├── route.go //路由模块 │ └── server.go //服务器模块 ├── go.mod ├── go.sum └── 文档\n实现第二步：理解程序运行过程 首先，先加载配置文件（config.yaml）并保存（这里命名为cfg）\n根据cfg配置网关核心模块（这里命名为gw）\n根据cfg和gw配置服务器（这里命名为srv）\n启动服务器\n运行服务\n优雅关闭服务器 流程图\n实现第三步：开始用代码实现 首先，我们需要写好配置文件（config.yaml） 思路为声明客户端端口并声明路由转发规则并配置要转发的路由路径与目标服务端口（本项目采用yaml文件配置，如果第一次接触可以花十分钟先去了解一下）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # 配置文件 server: port: 8080 # 网关客户端的端口 # 路由配置 routes: # 路由service-a - id: service-a # 路由service-a的ID path: /service-a # 路由service-a的路径 target: http://localhost:8081 # 路由service-a的目标服务端口 # 路由service-b - id: service-b path: /service-b target: http://localhost:8082 # 通过上述配置，我们可以实现以下路由转发功能 # 当访问http://localhost:8080/service-a时，会将请求转发到http://localhost:8081/service-a # 当访问http://localhost:8080/service-b时，会将请求转发到http://localhost:8082/service-b 其次，我们需要写解析配置文件模块（config.go）来解析配置文件（config.yaml） 思路为定义结构体并利用yaml标签映射配置文件中的字段，然后写LoadConfig函数根据传入的配置文件地址参数来解析配置文件（解析方法采用yaml.v3库） 定义结构体并利用yaml标签映射配置文件中的字段\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 type Config struct { Server Server `yaml:\u0026#34;server\u0026#34;` Routes []*Route `yaml:\u0026#34;routes\u0026#34;` } type Server struct { Port string `yaml:\u0026#34;port\u0026#34;` } type Route struct { ID string `yaml:\u0026#34;id\u0026#34;` Path string `yaml:\u0026#34;path\u0026#34;` Target string `yaml:\u0026#34;target\u0026#34;` } LoadConfig函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func LoadConfig(config string) (*Config, error) { var cfg Config data, err := os.ReadFile(config) if err != nil { return nil, err } if err := yaml.Unmarshal(data, \u0026amp;cfg); err != nil { return nil, err } return \u0026amp;cfg, nil } 3.然后，我们需要写网关核心模块（gateway.go）、反向代理模块（proxy.go）和路由模块（route.go）\n我们需要知道反向代理模块和路由模块的都是网关的核心功能，但为了代码的可维护性，我们将它们分别写在不同的文件中，通过依赖注入的方式将它们注入到网关核心模块中。\n先写route.go\n只需要定义Route结构体，其中routes为所有所要转发的路由，并写一个NewRoute函数用于创建结构体，再写一个FindRoute用于查找匹配路由（可采用字典树查询方式，本项目先采用遍历的方式。）\n定义结构体并写出NewRoute函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 type Router struct { routes []*config.Route } func NewRouter(routes []*config.Route) *Router { return \u0026amp;Router{ routes: routes, } } FindRoute函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 func (r *Router) FindRoute(path string) *config.Route { // 遍历查找匹配的路由 for _, route := range r.routes { // 检查路径是否匹配 if strings.HasPrefix(path, route.Path) { return route } } return nil } 再写proxy.go\n定义结构体并写出NewProxy函数(目前未额外添加其他功能，只是将结构分离便于拓展)，并实现ServeHTTP方法使其成为一个Handler。\n定义结构体并写出NewProxy函数\n1 2 3 4 5 6 7 8 9 10 11 12 type Proxy struct { } func NewProxy() *Proxy { return \u0026amp;Proxy{} } 实现反向代理的核心功能 - ServeHTTP方法（核心） ServeHTTP是Go语言中http.Handler接口的核心方法，它是HTTP请求处理的入口点，实现了ServeHTTP方法就相当于把对象变成了Handler。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 func (p *Proxy) ServeHTTP(w http.ResponseWriter, r *http.Request, route *config.Route) { // 解析目标服务URL targetURL, err := url.Parse(route.Target) if err != nil { http.Error(w, \u0026#34;无效的目标服务地址\u0026#34;, http.StatusInternalServerError) return } // 创建反向代理 proxy := httputil.NewSingleHostReverseProxy(targetURL) // 保存原始路径用于日志记录 originalPath := r.URL.Path // 设置反向代理的Director proxy.Director = func(req *http.Request) { // 设置目标服务的协议和主机 req.URL.Scheme = targetURL.Scheme req.URL.Host = targetURL.Host // 处理路径映射 req.URL.Path = targetURL.Path + strings.TrimPrefix(req.URL.Path, route.Path) } // 记录转发日志 log.Printf(\u0026#34;转发请求: %s %s -\u0026gt; %s://%s%s\u0026#34;, r.Method, originalPath, targetURL.Scheme, targetURL.Host, r.URL.Path) // 转发请求 proxy.ServeHTTP(w, r) } 最后，我们需要将反向代理模块和路由模块注入到网关核心模块中。\n定义Gateway结构体并注入反向代理模块和路由模块，并写出NewGateway函数，同时实现ServeHTTP方法使其成为一个Handler。\n定义结构体并注入反向代理模块和路由模块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 type Gateway struct { config *config.Config router *Router proxy *Proxy } func NewGateway(config *config.Config) *Gateway { return \u0026amp;Gateway{ config: config, router: NewRouter(config.Routes), proxy: NewProxy(), } } 实现网关核心功能 - ServeHTTP方法（核心）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func (g *Gateway) ServeHTTP(w http.ResponseWriter, r *http.Request) { // 查找匹配的路由 route := g.router.FindRoute(r.URL.Path) if route == nil { http.Error(w, \u0026#34;路由未找到\u0026#34;, http.StatusNotFound) return } // 转发请求 g.proxy.ServeHTTP(w, r, route) } 4.上述实现完成后我们开始写服务器\n写服务器的思路很直接，就是定义一个Server结构体（其中封装了一个http.Server）并给出NewServer函数用于创建结构体，同时定义一个Start方法用于启动服务器。\n定义结构体并写出NewServer函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 type Server struct { httpServer *http.Server } func NewServer(addr string, handler http.Handler) (*Server, error) { srv := \u0026amp;http.Server{ Addr: addr, Handler: handler, } return \u0026amp;Server{ httpServer: srv, }, nil } 实现启动服务器的Start方法（重点在于优雅关闭）\n服务器启动时，我们需要在一个goroutine中启动服务器以便能监听中断信号，同时在主goroutine中等待中断信号，收到信号后我们需要优雅关闭服务器（优雅关闭确保服务器立即停止接收新连接请求，但会等待所有已建立的连接和正在处理的请求正常完成，避免用户请求被强制中断和数据丢失，同时设置30秒超时保护机制，超时后强制关闭以保证系统资源能够及时释放）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 func (s *Server) Start() error { // 在goroutine中启动服务器以便能监听中断信号 go func() { if err := s.httpServer.ListenAndServe(); err != nil \u0026amp;\u0026amp; err != http.ErrServerClosed { log.Fatalf(\u0026#34;服务器启动失败: %v\u0026#34;, err) } }() log.Printf(\u0026#34;服务器正在监听地址 %s\u0026#34;, s.httpServer.Addr) // 等待中断信号 quit := make(chan os.Signal, 1) signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) \u0026lt;-quit log.Println(\u0026#34;正在关闭服务器...\u0026#34;) // 优雅关闭 ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second) defer cancel() if err := s.httpServer.Shutdown(ctx); err != nil { log.Fatal(\u0026#34;服务器关闭错误:\u0026#34;, err) } log.Println(\u0026#34;服务器已关闭\u0026#34;) return nil } 5.最后，我们在main函数中创建网关、路由模块、反向代理模块、服务器模块，并启动服务器即可。\n顺序为：加载配置 -\u0026gt; 创建网关 -\u0026gt; 创建服务器 -\u0026gt; 启动服务器\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package main import ( \u0026#34;gateway/internal/config\u0026#34; \u0026#34;gateway/internal/core\u0026#34; \u0026#34;log\u0026#34; ) func main() { // 加载配置 log.Println(\u0026#34;开始加载配置\u0026#34;) cfg, err := config.LoadConfig(\u0026#34;configs/config.yaml\u0026#34;) if err != nil { log.Fatal(\u0026#34;加载配置失败:\u0026#34;, err) } log.Println(\u0026#34;加载配置成功\u0026#34;) // 创建网关 log.Println(\u0026#34;开始创建网关\u0026#34;) gw := core.NewGateway(cfg) log.Println(\u0026#34;网关创建成功\u0026#34;) // 创建服务器 log.Println(\u0026#34;开始创建服务器\u0026#34;) // 修复：确保端口地址格式正确 addr := \u0026#34;:\u0026#34; + cfg.Server.Port srv, err := core.NewServer(addr, gw) if err != nil { log.Fatal(\u0026#34;创建服务器失败:\u0026#34;, err) } log.Println(\u0026#34;服务器创建成功\u0026#34;) // 启动服务器 log.Printf(\u0026#34;服务器正在监听端口 %s\u0026#34;, cfg.Server.Port) if err := srv.Start(); err != nil { log.Fatal(\u0026#34;服务器启动失败:\u0026#34;, err) } log.Println(\u0026#34;服务器已启动\u0026#34;) } 最后一步 测试网关 首先启动8081和8082端口的服务端，然后启动网关（8080），最后使用curl或postman测试网关是否正常工作。\n启动8081和8082端口的命令\n1 2 3 4 python3 -m http.server 8081 python3 -m http.server 8082 启动网关开始测试\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 启动网关 cd /home/leon/GoCode/30daysGateway/day1 go run cmd/main.go # 在另一个终端测试路由转发 curl http://localhost:8080/service-a curl http://localhost:8080/service-b 可见输入访问http://localhost:8080/service-a，返回了8081端口的响应，访问http://localhost:8080/service-b也返回了8082端口的响应，说明网关正常工作。\n本章结束。\n","date":"2025-10-10T00:00:00Z","image":"http://localhost:1313/face.png","permalink":"http://localhost:1313/p/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B32%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/","title":"Go微服务网关（2）：路由转发功能的实现"},{"content":"Go微服务网关开发（1） 本章内容主要介绍了微服务网关是什么，以及微服务网关的核心功能。\n什么是微服务？它有什么优势？ 微服务架构介绍 官方表述：\u0026ldquo;微服务是一种架构风格，将复杂应用程序分解为一组小的、松耦合的服务，每个服务专注于单一业务功能，围绕业务能力构建，可独立部署扩展。\u0026rdquo;\n通俗易懂解释：小诊所是一个整体，属于单体架构，而大型医院则将不同功能的服务分到不同科室，属于微服务架构。\n单体架构图\n\n微服务架构图\n\n微服务的优势 官方表述：微服务适合高并发、复杂业务、多团队协作的场景，通过解耦带来极致的灵活性和扩展性，但需配套完善的DevOps体系支撑其运维复杂度。\n通俗易懂解释：小诊所医生请假诊所关门便暂停服务，而医院的一个医生请假医院依旧正常运转，且小诊所医生需要掌握各种常发病的治疗方法，而医院的各个医生只需要负责对于的病症，效率更高，服务更好。\n什么是微服务网关？为什么要有微服务网关？ 微服务网关介绍 官方表述：微服务网关（Microservice Gateway） 是部署在微服务架构边缘的服务入口层，负责接收所有外部请求，并将其智能路由到后端对应的微服务实例。它作为服务边界的统一管控点，提供路由转发、负载均衡、安全认证、流量控制、协议转换等核心能力，是微服务架构中不可或缺的流量协调中心。\n通俗易懂的解释：把一个大型项目想象成一个一所医院，医院有许多科室，每个科室都有不同的功能（微服务），而网关就是医院的前台，若没了前台，你便很难快速地找到相应的科室，且你每到一个科室都要登记，还有很大可能该科室已经有挂满号，让你空跑一趟，效率极低，而前台（网关）的出现便帮我们解决了这些痛点，护士会根据你的症状为你指引正确的科室（路由转发 ），在前台登记后你便不用再重复登记（安全认证），在挂号时尽可能将病人分配到同一功能的不同科室以防止某个科室人数过多（负载均衡），若所有科室号都已挂满便会不再挂该科室的号（流量控制），同时前台可以监控各科室的情况（日志/监控），同时前台也在负责协调各个科室之间的通信（协议转换）。\n微服务网关必要性 必要性：若无微服务网关，则整个微服务项目因耦合度过低，各个模块相互独立，客户端请求一个服务需要访问多个模块，且各个模块功能交互较为混乱，微服务的优势变成了劣势。\n微服务网关的核心功能 这里我们先提供一个架构图\n\n1.统一入口（API聚合） 作用：所有客户端请求通过网关统一访问，避免直接暴露微服务细节。 场景：客户端（如前端/移动端）只需与网关交互，无需知道内部服务地址（如 /api/users → 路由到用户服务）。 实现：通过路由规则将请求分发到对应微服务。 通俗易懂理解：去医院挂号不用去各个科室挂号，前台挂号即可。\n2.路由转发 作用：根据请求规则将流量精准分发到后端微服务。 核心能力： 路径匹配：如 /orders/* → 订单服务。 权重路由：按比例分配流量（如80%新版本，20%旧版本）。 动态路由：基于服务注册中心动态更新路由表。 通俗易懂理解：去医院看病，前台会指引你去正确的科室。\n3. 安全认证 认证（Authentication）：验证请求合法性（如 JWT、OAuth2.0、API Key）。 授权（Authorization）：检查用户权限（如 VIP用户才能访问特定接口）。 限流（Rate Limiting）：防止恶意请求或流量激增（如每秒100次/用户）。 HTTPS/TLS终止：解密请求流量，减轻微服务安全负担。 通俗易懂理解：看病无需去各个科室登记身份，前台登记即可\n4. 流量控制 负载均衡：在多个服务实例间均匀分配请求（轮询/最少活跃/哈希）。 熔断（Circuit Breaker）：服务故障时快速失败，避免级联崩溃（如 Hystrix/Sentinel）。 超时控制：设置请求超时，防止资源阻塞。 重试机制：对瞬态错误自动重试（如 502/503 错误）。 通俗易懂理解：若科室号已挂满，前台便停止该科室挂号服务直至该科室有空闲。\n5. 协议转换 适配不同协议：将 HTTP/HTTPS 转为 WebSocket/gRPC 或其他协议。 请求/响应处理： 映射请求路径（如 /api/v1/ → 简化为 /）。 数据格式转换（如 XML → JSON）。 请求头修改（如添加 tracing ID）。 通俗易懂理解：不同科室之间通过前台通信，前台负责将A科室的请求转换后发送到B科室。\n6. 日志监控 日志记录：统一记录请求/响应日志（含时间、路径、状态码）。 监控指标：收集延迟、QPS、错误率等数据（ Prometheus 格式）。 链路追踪：注入 trace ID（如 Zipkin/Jaeger）。 通俗易懂理解：前台可以监视各个科室发生的事件并记录。\n微服务架构未来发展 目前市面上各个大厂（如阿里、字节、腾讯等）都在使用微服务架构，即使是一些老项目也在用微服务重构。\n企业 核心场景 微服务价值体现 阿里云 双11大促（百万级TPS） 弹性扩容（秒级扩容1000+服务器）、故障隔离（订单宕机不影响商品浏览） 字节跳动 全球化短视频（抖音/TikTok） 跨地域部署（不同区域独立服务实例）、多语言能力（Go/Java/Rust按需求选择） 腾讯 微信生态（10亿用户+） 服务自治（支付/消息/登录独立容灾）、灰度发布（A/B测试新功能） 美团 O2O全链路（交易到配送） 复杂业务解耦（骑手调度/优惠券/商户服务独立迭代） 同时各个大厂也自研了微服务网关\n企业 网关方案 技术栈 应用场景 阿里云 MSE微服务引擎 自研+Envoy+Dubbo 企业级多云混合云 字节跳动 自研高性能网关 Go+Rust+DPDK 全球化高并发 腾讯 API网关（TSF集成） Spring Cloud+Envoy 金融级高可用 百度 智能网关Baidu Cloud Mesh（BCM） Istio+Kubernetes AI+大数据服务网关 微服务网关与云结合\n\n未来已来：当网关能力完全云服务化后，企业将不再关心“网关在哪里”，只需定义“我要什么功能”——这正是云计算终极目标的体现。建议企业优先采用云厂商全托管网关服务，将精力聚焦在业务创新而非基础设施运维。\n综上可见，未来微服务将是软件行业发展趋势，微服务网关与云的结合将会产生新一轮的变革。\n","date":"2025-10-01T00:00:00Z","image":"http://localhost:1313/p/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B31-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/face_hu_782ac07a16f74397.png","permalink":"http://localhost:1313/p/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B31-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/","title":"Go微服务网关(1): 基本概念介绍"},{"content":"Hugo + GitHub快速搭建个人博客 视频教程\n引言 一直想拥有一个属于自己的个人博客，分享技术心得或生活点滴？也许你曾被 WordPress 的笨重、服务器的费用或是某些平台有限的自定义功能劝退。\n如果我告诉你，有一种方法可以让你免费、极速地搭建一个完全由你掌控的现代化博客，你是否会心动？\n本文将带你走进 Hugo + GitHub Pages 的世界。我们将利用 Hugo 的闪电般的速度和 GitHub 的免费托管服务，从零开始，一步步打造一个优雅、高效且无需任何花费的个人网站。准备好，让我们开始构建吧！\nHugo：Go语言编写的超高速静态网站生成器。\nGit：一个免费、开源的分布式版本控制系统。\nGithub：全球最大的基于Git的代码托管与协作平台。\n环境准备 安装Hugo Hugo安装\n安装Git Git安装\n注册一个GitHub账号 GitHub注册\n本文章仅提供在windows上安装教程\n安装 Git\n访问 git-scm.com/downloads 下载 Windows 版的 Git。 运行安装程序，一路点击 \u0026ldquo;Next\u0026rdquo; 使用默认选项完成安装即可。 安装 Hugo Extended\n点击“开始”菜单，输入 PowerShell，选择 “Windows PowerShell” (不要选“以管理员身份运行”)。\n在打开的 PowerShell 窗口中，依次执行以下三行命令（复制一行，按 Enter，再复制下一行\n1 2 3 4 5 6 7 # 1. 允许当前用户执行远程脚本 (只需执行一次) Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # (如果询问，输入 Y 并回车) # 2. 安装 Scoop 包管理器 irm get.scoop.sh | iex # 3. 使用 Scoop 安装 Hugo Extended 版本 (功能最全) scoop install hugo-extended 打开终端验证安装是否成功\n按下win+R，输入cmd，回车进入终端，输入以下命令\n1 2 git --version hugo version 如果能看到版本号，说明安装成功。\n创建本地博客项目 打开终端，cd 到你希望存放博客项目的文件夹。\n运行以下命令来创建一个新的 Hugo 站点。我们将博客项目命名为 my-blog。\n1 hugo new site my-blog 进入刚刚创建的目录并初始化Git仓库 1 2 cd my-blog git init 添加主题 选择主题 Hugo官方主题库\n由于各个主题文件目录不同，配置方法也有所差异，但大体相同，可借助AI帮助配置，本文仅展示stack主题的配置\n选择一个点击进去，点击demo即可看到主题的效果,点击download即可跳转到github仓库\n点击tag\n下载最新版本\n下载源码\n解压缩到themes文件夹，并将名字中的版本号去掉，效果如下\n配置主题 在 my-blog 目录下，执行以下命令（仅针对本项目，功能是提取作者的演示案例作为初始项目，并清除作者的演示案例）\n1 2 3 4 5 6 7 8 9 10 11 :: 强制删除当前目录的 content 文件夹（若存在） rd /s /q content 2\u0026gt;nul :: 将主题示例的 content 复制到当前目录 xcopy \u0026#34;themes\\hugo-theme-stack\\exampleSite\\content\u0026#34; \u0026#34;content\u0026#34; /E /I /H /Y :: 删除 exampleSite 文件夹 rd /s /q \u0026#34;themes\\hugo-theme-stack\\exampleSite\u0026#34; 2\u0026gt;nulontinue :: 删除 rich-content 文件夹 rd /s /q \u0026#34;content/post/rich-content\u0026#34; 删除hugo.toml，并创建hugo.yaml (进入相应文件夹删除创建即可)\n将下面模板代码完整复制到config.yaml文件中，根据注释修改你的信息\n站点基础配置 baseurl: https://example.com/ # 网站根URL languageCode: en-us # 默认语言代码 theme: hugo-theme-stack # 使用的主题名称 title: Example Site # 网站标题 copyright: Example Person # 版权信息 # 国际化配置 # 支持的语言: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: en # 默认内容语言 # 如果默认语言是中文/日文/韩文，需设置为true # 这将使.Summary和.WordCount对CJK语言正常工作 hasCJKLanguage: false # 多语言详细配置 languages: en: languageName: English # 语言显示名称 title: Example Site # 该语言下的网站标题 weight: 1 # 权重（排序用） params: sidebar: subtitle: Example description # 侧边栏副标题 zh-cn: languageName: 中文 title: 演示站点 weight: 2 params: sidebar: subtitle: 演示说明 ar: languageName: عربي languagedirection: rtl # 文本方向（阿拉伯语从右到左） title: موقع تجريبي weight: 3 params: sidebar: subtitle: وصف تجريبي # 第三方服务配置 services: # Disqus评论系统（使用前需修改为你的shortname） disqus: shortname: \u0026#34;hugo-theme-stack\u0026#34; # Google Analytics跟踪ID googleAnalytics: id: # 填入你的GA跟踪ID # 分页设置 pagination: pagerSize: 3 # 分页器显示页码数量 # 永久链接格式 permalinks: post: /p/:slug/ # 文章URL格式 page: /:slug/ # 页面URL格式 # 主题参数配置 params: mainSections: - post # 主要内容区域 featuredImageField: image # 特色图片字段名 rssFullContent: true # RSS是否包含全文 favicon: # 网站图标路径，如：/favicon.ico # 页脚设置 footer: since: 2020 # 起始年份 customText: # 自定义文本 # 日期格式 dateFormat: published: Jan 02, 2006 # 发布日期格式 lastUpdated: Jan 02, 2006 15:04 MST # 最后更新日期格式 # 侧边栏设置 sidebar: emoji: 🍥 # 表情图标 subtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. # 副标题 avatar: enabled: true # 是否显示头像 local: true # 是否使用本地图片 src: img/avatar.png # 头像路径 # 文章设置 article: math: false # 是否支持数学公式 toc: true # 是否显示目录 readingTime: true # 是否显示阅读时间 license: enabled: true # 是否显示版权信息 default: Licensed under CC BY-NC-SA 4.0 # 默认许可证 # 评论系统配置 comments: enabled: true # 启用评论 provider: disqus # 评论提供商 # 各评论系统的具体配置 disqusjs: {...} # DisqusJS配置 utterances: {...} # Utterances配置（GitHub-based） beaudar: {...} # Beaudar配置 remark42: {...} # Remark42配置 vssue: {...} # Vssue配置 waline: {...} # Waline配置 twikoo: {...} # Twikoo配置 cactus: {...} # Cactus Chat配置 giscus: {...} # Giscus配置（GitHub Discussions） gitalk: {...} # Gitalk配置 cusdis: {...} # Cusdis配置 # 小工具配置 widgets: homepage: # 首页小工具 - type: search # 搜索框 - type: archives # 文章归档 params: limit: 5 # 显示数量 - type: categories # 分类 params: limit: 10 - type: tag-cloud # 标签云 params: limit: 10 page: - type: toc # 页面目录 # OpenGraph设置（社交媒体分享） opengraph: twitter: site: # Twitter用户名 card: summary_large_image # 卡片类型：summary或summary_large_image # 默认图片设置 defaultImage: opengraph: enabled: false # 是否启用 local: false # 是否使用本地图片 src: # 图片路径 # 颜色方案 colorScheme: toggle: true # 是否显示切换按钮 default: auto # 默认模式：auto, light, dark # 图片处理 imageProcessing: cover: enabled: true # 处理封面图片 content: enabled: true # 处理内容图片 # 自定义菜单配置 menu: main: [] # 主导航菜单 social: # 社交链接菜单 - identifier: github name: GitHub url: https://github.com/CaiJimmy/hugo-theme-stack params: icon: brand-github # 图标名称 # 相关文章设置 related: includeNewer: true # 是否包含较新文章 threshold: 60 # 相关度阈值 toLower: false # 是否忽略大小写 indices: - name: tags # 使用标签作为关联依据 weight: 100 # 权重 - name: categories # 使用分类作为关联依据 weight: 200 # Markdown渲染设置 markup: goldmark: extensions: passthrough: enable: true # 启用原始HTML通过 delimiters: block: # 块级分隔符 - - \\[ - \\] - - $$ - $$ inline: # 行内分隔符 - - \\( - \\) renderer: unsafe: true # 允许不安全HTML（直接渲染HTML内容） tableOfContents: endLevel: 4 # 目录结束级别 ordered: true # 是否有序 startLevel: 2 # 目录开始级别 highlight: noClasses: false # 是否使用内联样式 codeFences: true # 启用代码围栏 guessSyntax: true # 自动猜测语法 lineNoStart: 1 # 行号起始值 lineNos: true # 显示行号 lineNumbersInTable: true # 在表格中显示行号 tabWidth: 4 # 制表符宽度 重点： 务必修改 baseURL、title、avatar.src 和 social 部分的内容为你自己的信息。\n本地预览 在发布到互联网前，先在本地预览效果。\n在 my-blog 目录的 PowerShell 中执行：\n1 hugo server -D 终端会提示一个地址，通常是 http://localhost:1313/。在浏览器中打开它，你应该能看到你的博客了。\n托管代码到 GitHub 并设置自动化部署 创建并设置源代码仓库 登录 GitHub，创建一个新仓库用于存放博客的源代码。 Repository name: \u0026lt;你的用户名\u0026gt;.github.io (这是获取顶级访问域名的关键，例如用户名 john 则仓库名为 john.github.io)。 将仓库 visibility 设为 Public (私有仓库需要付费账户才能使用 Pages 功能)。 不要勾选 \u0026ldquo;Initialize this repository with a README\u0026rdquo;。 创建完成后，复制仓库的 HTTPS 地址（格式为 https://github.com/\u0026lt;你的用户名\u0026gt;/\u0026lt;你的用户名\u0026gt;.github.io.git）。 推送本地代码到仓库 在本地终端 (如 PowerShell) 中，进入你的 Hugo 站点根目录 (例如 my-blog)，执行以下命令：\n1 2 3 4 5 6 7 8 # 关联远程仓库（地址替换为刚复制的地址） git remote add origin https://github.com/\u0026lt;你的用户名\u0026gt;/\u0026lt;你的用户名\u0026gt;.github.io.git # 添加所有文件到暂存区并提交 git add . git commit -m \u0026#34;Initial commit with Hugo site and Stack theme\u0026#34; # 将本地 main 分支推送到 GitHub 并设为上游分支 git branch -M main git push -u origin main 配置自动化部署 (GitHub Actions) 设置Github Pages\n点击Settings\n点击左侧Pages\n将Buile and depolyment由Deploy from branch 改为 GitHub Actions\n在本地站点根目录下，创建目录结构：.github/workflows/，并在 workflows 目录中新建文件 deploy.yml。\n用文本编辑器打开 deploy.yml，粘贴以下工作流配置（该配置使用官方推荐 Actions，支持自动构建、发布）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 name: Deploy Hugo Site to Pages on: push: branches: [\u0026#34;main\u0026#34;] # 代码推送至 main 分支时触发 workflow_dispatch: # 支持手动触发 permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: submodules: recursive # 自动拉取主题子模块 fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true # 若主题需扩展版，取消注释 - name: Build with Hugo run: hugo --minify --gc # 生成优化后的静态文件 - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # 上传生成的站点文件 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 保存文件后，在终端中执行以下命令提交并推送工作流配置： 1 2 3 git add .github/workflows/deploy.yml git commit -m \u0026#34;chore: Add GitHub Actions workflow for deployment\u0026#34; git push 查看部署状态和访问博客 推送完成后，在浏览器中访问你的 GitHub 仓库：https://github.com/\u0026lt;你的用户名\u0026gt;/\u0026lt;你的用户名\u0026gt;.github.io。 点击顶部 Actions 标签页，查看名为 \u0026ldquo;Deploy Hugo Site to Pages\u0026rdquo; 的工作流运行状态。等待运行完成（出现绿色对勾 ✅）。 部署成功后，进入 Settings → Pages，页面顶部会显示你的博客访问地址：https://\u0026lt;你的用户名\u0026gt;.github.io。 点击该链接即可访问已自动发布的博客。 你的日常写作流程 (Windows) 从此以后，你更新博客的流程将非常简单：\n新建文章：\n1 2 3 4 5 #两种方式 #第一种：命令创建 hugo new content post/文章名/index.md #第二种：手动添加 将写好的markdown文档添加到content/post里面 写作与预览：\n用 VS Code 编辑刚生成的 content/post/我的新文章.md 文件。 在终端运行 hugo server，然后在浏览器打开 http://localhost:1313 实时预览。 发布上线：\n写完并预览满意后，只需执行： 1 2 3 git add . git commit -m \u0026#34;Publish: 我的新文章\u0026#34; git push 推送后，GitHub Actions 会自动开始构建和部署。几分钟后，新文章就会出现在你的网站上。\n完成！ 你已经拥有了一个完全自动化、部署在 GitHub Pages 上的现代化博客系统。\n重点 GitHub仓库一定要命名为\u0026lt;用户名\u0026gt;.github.io,仓库的Buile and depolyment一定要设为GitHub Actions 若手动添加markdown文档，则需要手写front matter，如果是纯文章可以任意命名，否则必须命名为index.md，只有这样才可以包含图片 图片要和相应的文档放在同一文件夹，采用! [Alt] (文件地址)调用 文件地址要采用相对路径 若采取相同主题则可一步一步按照上述流程进行操作，若采取不同主题该文档仅供参考 ","date":"2025-09-30T00:00:00Z","image":"http://localhost:1313/p/hugo--github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/face_hu_7df7d756ea0053a9.jpg","permalink":"http://localhost:1313/p/hugo--github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"Hugo + GitHub快速搭建个人博客"}]